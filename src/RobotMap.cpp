// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::basePilotableMoteurG;
std::shared_ptr<SpeedController> RobotMap::basePilotableMoteurD;
std::shared_ptr<RobotDrive> RobotMap::basePilotableRobotDrive;
std::shared_ptr<Encoder> RobotMap::basePilotableEncoderG;
std::shared_ptr<SpeedController> RobotMap::intakeSpin;
std::shared_ptr<DigitalInput> RobotMap::intakeSwitch;
std::shared_ptr<SpeedController> RobotMap::intakeMonte;
std::shared_ptr<SpeedController> RobotMap::shooterConvoyeur;
std::shared_ptr<SpeedController> RobotMap::shooterPitcheur;
std::shared_ptr<DigitalInput> RobotMap::shooterSwitch;
std::shared_ptr<SpeedController> RobotMap::elevateurMonteur;
std::shared_ptr<AnalogPotentiometer> RobotMap::elevateurPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    basePilotableMoteurG.reset(new VictorSP(0));
    lw->AddActuator("BasePilotable", "MoteurG", std::static_pointer_cast<VictorSP>(basePilotableMoteurG));
    
    basePilotableMoteurD.reset(new VictorSP(1));
    lw->AddActuator("BasePilotable", "MoteurD", std::static_pointer_cast<VictorSP>(basePilotableMoteurD));
    
    basePilotableRobotDrive.reset(new RobotDrive(basePilotableMoteurG, basePilotableMoteurD));
    
    basePilotableRobotDrive->SetSafetyEnabled(true);
        basePilotableRobotDrive->SetExpiration(0.1);
        basePilotableRobotDrive->SetSensitivity(0.5);
        basePilotableRobotDrive->SetMaxOutput(1.0);
        basePilotableRobotDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
        basePilotableRobotDrive->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
    basePilotableEncoderG.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("BasePilotable", "EncoderG", basePilotableEncoderG);
    basePilotableEncoderG->SetDistancePerPulse(2.3057E-4);
    basePilotableEncoderG->SetPIDSourceType(PIDSourceType::kRate);
    intakeSpin.reset(new VictorSP(5));
    lw->AddActuator("Intake", "Spin", std::static_pointer_cast<VictorSP>(intakeSpin));
    
    intakeSwitch.reset(new DigitalInput(5));
    lw->AddSensor("Intake", "Switch", intakeSwitch);
    
    intakeMonte.reset(new VictorSP(4));
    lw->AddActuator("Intake", "Monte", std::static_pointer_cast<VictorSP>(intakeMonte));
    
    shooterConvoyeur.reset(new VictorSP(6));
    lw->AddActuator("Shooter", "Convoyeur", std::static_pointer_cast<VictorSP>(shooterConvoyeur));
    
    shooterPitcheur.reset(new VictorSP(7));
    lw->AddActuator("Shooter", "Pitcheur", std::static_pointer_cast<VictorSP>(shooterPitcheur));
    
    shooterSwitch.reset(new DigitalInput(4));
    lw->AddSensor("Shooter", "Switch", shooterSwitch);
    
    elevateurMonteur.reset(new VictorSP(8));
    lw->AddActuator("Elevateur", "Monteur", std::static_pointer_cast<VictorSP>(elevateurMonteur));
    
    elevateurPot.reset(new AnalogPotentiometer(0, 1.0, 0.0));
    lw->AddSensor("Elevateur", "Pot", elevateurPot);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
